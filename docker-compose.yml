version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports: ["2181:2181"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-lc", "echo ruok | nc -w 2 127.0.0.1 2181 | grep imok || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      zookeeper: { condition: service_healthy }
    ports:
      - "9092:9092" # ahora s√≠ lo expones al host
      - "29092:29092" # puerto alternativo para pruebas externas
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL # üëà obligatorio
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-lc", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 15

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    depends_on:
      kafka: { condition: service_healthy }
    ports: ["8081:8081"]
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-lc", "wget -qO- http://localhost:8081/subjects >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 5s
      timeout: 3s
      retries: 20

  mongo:
    image: mongo:6
    ports: ["27018:27017"]
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "bash", "-lc", "mongosh --quiet --eval 'db.runCommand({ ping: 1 })' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 20

  # --- Producer ---
  shipping-ops-producer:
    build:
      context: .   # üëà este es el repo actual
      dockerfile: Dockerfile
    image: AlexisJoselyn/shipping-ops-producer:1.0
    ports: ["8087:8087"]
    environment:
      SERVER_PORT: 8087
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      REDIS_HOST: redis
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      kafka: { condition: service_healthy }
      schema-registry: { condition: service_healthy }
      redis: { condition: service_healthy }
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-lc", "wget -qO- http://localhost:8085/actuator/health | grep UP >/dev/null 2>&1"]
      interval: 15s
      timeout: 5s
      retries: 20


  # --- Consumer ---
  dispatch-orchestrator-consumer:
    build:
      context: ../dispatch-orchestrator-consumer   # üëà ruta relativa al repo del producer
      dockerfile: Dockerfile
    image: AlexisJoselyn/dispatch-orchestrator-consumer:1.0
    ports: ["8088:8088"]
    environment:
      SERVER_PORT: 8088
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MONGO_URI: mongodb://mongo:27017/shipmentsdb
    depends_on:
      kafka: { condition: service_healthy }
      schema-registry: { condition: service_healthy }
      redis: { condition: service_healthy }
      mongo: { condition: service_healthy }
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-lc", "wget -qO- http://localhost:8086/api/health >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20


  # --- Exporters & Observability ---

  # Exporta m√©tricas de Kafka (broker)
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    depends_on:
      kafka: { condition: service_healthy }
    command: [ "--kafka.server=kafka:9092" ]
    ports: [ "9308:9308" ]
    restart: unless-stopped

  # Exporta m√©tricas de Redis
  redis-exporter:
    image: oliver006/redis_exporter:v1.62.0
    environment:
      REDIS_ADDR: redis:6379
    ports: [ "9121:9121" ]
    restart: unless-stopped

  # Exporta m√©tricas de Mongo
  mongodb-exporter:
    image: percona/mongodb_exporter:0.40
    depends_on:
      mongo: { condition: service_healthy }
    command:
      - '--mongodb.uri=mongodb://mongo:27017'
    ports: [ "9216:9216" ]
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.55.1
    depends_on:
      - card-ops-producer
      - dispatch-consumer
      - kafka-exporter
      - redis-exporter
      - mongodb-exporter
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: [ "9090:9090" ]
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:10.4.6
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports: [ "3000:3000" ]
    restart: unless-stopped
